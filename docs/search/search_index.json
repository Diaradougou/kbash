{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Quickstart Proof of Concept This will verify that the system is operational by dropping you into a shell git clone git@github.com:korsimoro/kbash ~/.kbash ~/.kbash/test/sanity.sh Example Output Bootstrap This is how you bootstrap a new environment git clone git@github.com:korsimoro/kbash ~/.kbash ~/.kbash/setup.sh <ENTRYPOINT> <VARSCOPE> <DIRECTORY> <DIRECTORY>/shell.sh Argument Description ENTRYPOINT This is the name of the command introduced into the environment, and the prefix on all defined shell assets (functions, internal variables) VARSCOPE This is the prefix attached to all public variables used to describe and control the environment DIRECTORY This is the directory in which the new kbash environment is to be set up Troubleshooting Terminology and Core Ideas What is a $PROJECT A project is a kbash environment coupled to a specific base directory, known internally as $VAR_PREFIX , where the VAR_PREFIX variable is the base of the $PROJECT Keep in mind that VAR_PREFIX is not the name of the variable, rather it is the name of the name of the variable. So, for example, in the kx test project, KXX is the VAR_PREFIX and $KXX evaluates to the base of the kx project. Commands and Functions Utility files and Language Support Components Concept and Purpose The kbash environment may be useful when rapidly investigating and hacking around multiple projects across diverse technologies. In such a context, it is often useful to write a one-off shell script that you expect to use once-or twice, but often wind up using for a while. The kbash environment is a Convention-based toolkit which organizes these one-off bits of knowledge, until such time as they can be integrated into the mainstream build environment (at which time the kbash environment can be pruned.) The kbash environment aims to be the grease-in-the-gears, where accumulation of project-specific structure and knowledge should be continuously migrated out of the kbash environment. kbash should be a value-added utility, not a solution in itself. The kbash environment supports bash ing code into behaviour, adapting to local conditions, and exploring what needs to be done to move projects to the next level - without hampering the developer with the need to get the dev-env working first. When to use project-discovery For mature projects, the roll of kbash should be reduced substantially. The kbash environment exists to support exploration, and the documented accretion of devops knowledge in the form of bash snippets, operating against a rich field of structure, utilities, and variables. multi-project If a project consists of a blending of multiple sub-projects, and the investigation of an complex build. Once the complex build is well understood, the knowledge accumulated in kbash scripts should be migrated into the more mature build systems of the sub-projects. Drivers environment-coupling Rather than being confined to operations on the filesystem, kbash allows systematic use of the shell environment. This is similar to - python venv - virtual environments for python - nvm - virtual environments for node - rvm - virtual environments for ruby Environmental coupling is accomplished through the use of bash function sets which are integrated into the control, help, and convention systems. multiple-concurrency Multiple kbash environments can co-exist, as all shell variables, including the entry point, are scoped by prefixes - ENTRYPOINT - this is the entrypoint, and is used to prefix all project specfic information. environment-isolation Often, when developing node or python systems, each has an active set of CLI entrypoints which are required by the repository. Many build systems rely on system deployments. While solutions like docker are excellent at capturing these dependencies, there is often a lengthy task of figuring out how to combine those solutions into a docker image, as well as making decisions about which solution flavor to include. The kbash environment is useful in capturing this information, through the use of appropriate environment variables which are unique to a given sub-project. consistent scripting environment Many useful patterns in bash scripting are rather arcane. kbash wraps these in more intent-expressive labels. dynamic-reload Talk about kd reset and ACTIVATION_COUNT and prompt dynamic-assignment Talk about loading via Eval via boot.sh When not use make-replacement The kbash environment is not a make replacement yarn-replacement The kbash environment is not a yarn replacement npm-replacement The kbash environment is not a npm replacement lerna-replacement The kbash environment is not a lerna replacement","title":"Home"},{"location":"#quickstart","text":"","title":"Quickstart"},{"location":"#proof-of-concept","text":"This will verify that the system is operational by dropping you into a shell git clone git@github.com:korsimoro/kbash ~/.kbash ~/.kbash/test/sanity.sh Example Output","title":"Proof of Concept"},{"location":"#bootstrap","text":"This is how you bootstrap a new environment git clone git@github.com:korsimoro/kbash ~/.kbash ~/.kbash/setup.sh <ENTRYPOINT> <VARSCOPE> <DIRECTORY> <DIRECTORY>/shell.sh Argument Description ENTRYPOINT This is the name of the command introduced into the environment, and the prefix on all defined shell assets (functions, internal variables) VARSCOPE This is the prefix attached to all public variables used to describe and control the environment DIRECTORY This is the directory in which the new kbash environment is to be set up","title":"Bootstrap"},{"location":"#troubleshooting","text":"","title":"Troubleshooting"},{"location":"#terminology-and-core-ideas","text":"","title":"Terminology and Core Ideas"},{"location":"#what-is-a-project","text":"A project is a kbash environment coupled to a specific base directory, known internally as $VAR_PREFIX , where the VAR_PREFIX variable is the base of the $PROJECT Keep in mind that VAR_PREFIX is not the name of the variable, rather it is the name of the name of the variable. So, for example, in the kx test project, KXX is the VAR_PREFIX and $KXX evaluates to the base of the kx project.","title":"What is a $PROJECT"},{"location":"#commands-and-functions","text":"","title":"Commands and Functions"},{"location":"#utility-files-and-language-support","text":"","title":"Utility files and Language Support"},{"location":"#components","text":"","title":"Components"},{"location":"#concept-and-purpose","text":"The kbash environment may be useful when rapidly investigating and hacking around multiple projects across diverse technologies. In such a context, it is often useful to write a one-off shell script that you expect to use once-or twice, but often wind up using for a while. The kbash environment is a Convention-based toolkit which organizes these one-off bits of knowledge, until such time as they can be integrated into the mainstream build environment (at which time the kbash environment can be pruned.) The kbash environment aims to be the grease-in-the-gears, where accumulation of project-specific structure and knowledge should be continuously migrated out of the kbash environment. kbash should be a value-added utility, not a solution in itself. The kbash environment supports bash ing code into behaviour, adapting to local conditions, and exploring what needs to be done to move projects to the next level - without hampering the developer with the need to get the dev-env working first.","title":"Concept and Purpose"},{"location":"#when-to-use","text":"project-discovery For mature projects, the roll of kbash should be reduced substantially. The kbash environment exists to support exploration, and the documented accretion of devops knowledge in the form of bash snippets, operating against a rich field of structure, utilities, and variables. multi-project If a project consists of a blending of multiple sub-projects, and the investigation of an complex build. Once the complex build is well understood, the knowledge accumulated in kbash scripts should be migrated into the more mature build systems of the sub-projects.","title":"When to use"},{"location":"#drivers","text":"environment-coupling Rather than being confined to operations on the filesystem, kbash allows systematic use of the shell environment. This is similar to - python venv - virtual environments for python - nvm - virtual environments for node - rvm - virtual environments for ruby Environmental coupling is accomplished through the use of bash function sets which are integrated into the control, help, and convention systems. multiple-concurrency Multiple kbash environments can co-exist, as all shell variables, including the entry point, are scoped by prefixes - ENTRYPOINT - this is the entrypoint, and is used to prefix all project specfic information. environment-isolation Often, when developing node or python systems, each has an active set of CLI entrypoints which are required by the repository. Many build systems rely on system deployments. While solutions like docker are excellent at capturing these dependencies, there is often a lengthy task of figuring out how to combine those solutions into a docker image, as well as making decisions about which solution flavor to include. The kbash environment is useful in capturing this information, through the use of appropriate environment variables which are unique to a given sub-project. consistent scripting environment Many useful patterns in bash scripting are rather arcane. kbash wraps these in more intent-expressive labels. dynamic-reload Talk about kd reset and ACTIVATION_COUNT and prompt dynamic-assignment Talk about loading via Eval via boot.sh","title":"Drivers"},{"location":"#when-not-use","text":"make-replacement The kbash environment is not a make replacement yarn-replacement The kbash environment is not a yarn replacement npm-replacement The kbash environment is not a npm replacement lerna-replacement The kbash environment is not a lerna replacement","title":"When not use"},{"location":"example-manual/","text":"kd kd [COMMAND] [help|--help|-help|-h|?] ... kd is a bash environment supporting development. Functions (modify the current shell) activate Configure shell to match build environment for [COMPONENT] add-command Add a function. add-component cd home, or into /home/ewelton/Desktop/korsimoro/projects/kit-workbench/[C]. add-function Add a function. build Build [C] using component build system cd cd /home/ewelton/Desktop/korsimoro/projects/kit-workbench/[PATH] (or base w/o arg) clean Remove as many artifacts for [C] as we know about describe Describe information about this build env kbash-env Display current environment settings. kbash-troff disable KBASH_TRACE kbash-tron set KBASH_TRACE to trace KBASH internals parallel Control how many jobs run in parallel. reset Reload the environment. setup Initialize a development environment troff Stop bash execution trace. tron Start bash execution trace. Commands (run as subprocesses) about Detailed Information about KBASH component-list Just fetch updates docs The KIT Workbench Documentation Environment kernel The KIT Workbench Documentation Environment klang Manage KBASH top level languages manual Generate help manual Components bench Identity Tech Workbench - powered by JupyterLab credcom_kernel Credenitial-Commons @identity.com dsr_kernel Description of dsr_kernel itypescript Description of itypescript nteract Description of nteract tool Python CLI tool_kernel Description of tool_kernel Use kd [FUNCTION|COMMAND|COMPONENT] help for more information. Functions Functions manipulate the local shell variables, unlike commands, which are executed by the shell as a subprocess. activate kd activate [help|--help|-help|-h|?] [COMPONENT] Configure shell to match build environment for [COMPONENT] add-command kd add_command [help|--help|-help|-h|?] COMMAND_NAME Add a function. <<DETAILED INFORMATION ABOUT add_command>> add-component kd add_component [help|--help|-help|-h|?] [COMPONENT] cd home, or into /home/ewelton/Desktop/korsimoro/projects/kit-workbench/[C]. kd component-new [component-name] [component-var-prefix] add-function kd add_function [help|--help|-help|-h|?] FUNCTION_NAME Add a function. <<DETAILED INFORMATION ABOUT add_function>> build kd build [help|--help|-help|-h|?] [COMPONENT] Build [C] using component build system cd kd cd [help|--help|-help|-h|?] [PATH] cd /home/ewelton/Desktop/korsimoro/projects/kit-workbench/[PATH] (or base w/o arg) This is a shell function, which execute cd as follows: cd /home/ewelton/Desktop/korsimoro/projects/kit-workbench/[PATH]. If no PATH is provided, this just cds into cd /home/ewelton/Desktop/korsimoro/projects/kit-workbench clean kd clean [help|--help|-help|-h|?] [COMPONENT] Remove as many artifacts for [C] as we know about kd clean [COMPONENT] ... Goal : Remove as many artifacts for [C] as we know about Components bench Identity Tech Workbench - powered by JupyterLab credcom_kernel Credenitial-Commons @identity.com dsr_kernel Description of dsr_kernel itypescript Description of itypescript nteract Description of nteract tool Python CLI tool_kernel Description of tool_kernel describe kd describe [help|--help|-help|-h|?] [COMPONENT] Describe information about this build env kd describe [COMPONENT] ... Goal : Describe information about this build env Components bench Identity Tech Workbench - powered by JupyterLab credcom_kernel Credenitial-Commons @identity.com dsr_kernel Description of dsr_kernel itypescript Description of itypescript nteract Description of nteract tool Python CLI tool_kernel Description of tool_kernel kbash-env kd kbash_env [help|--help|-help|-h|?] Display current environment settings. kd env kbash-troff kd kbash_troff [help|--help|-help|-h|?] disable KBASH_TRACE This is equivalent to export KBASH_TRACE=false kbash-tron kd kbash_tron [help|--help|-help|-h|?] set KBASH_TRACE to trace KBASH internals This is equivalent to export KBASH_TRACE=true parallel kd parallel [help|--help|-help|-h|?] MAXJOBS Control how many jobs run in parallel. Control how many jobs run in parallel reset kd reset [help|--help|-help|-h|?] Reload the environment. In this shell, execute: /home/ewelton/Desktop/korsimoro/projects/kit-workbench/activate.sh This will cause the entire kd runtime to be reloaded, so any changes to functions or commands will be processed. This will update the activation count from 12 to 13 setup kd setup [help|--help|-help|-h|?] [COMPONENT] Initialize a development environment troff kd troff [help|--help|-help|-h|?] Stop bash execution trace. Equivalent to set +x tron kd tron [help|--help|-help|-h|?] Start bash execution trace. Equivalent to set -x Commands about kd <command> [help] kd is a bash environment supporting development. kd is pure anti-pattern, in includes - 'within-environment' mutations- bash functions allow forward mutation of the active environment, with no guarantees of any stable state, save the single application of this function after a clean reset - pure 'side-effect' focus. This is an attempt to identify mutators to the filesystem, and to codify them. All functions and commands in the environment are expected to operate upon the filesystem directly. git provides us exceptional visiblity into changes over the active checkout. kd supports the development of ad-hoc tasks required to effectively build a complex, multi-project system. As knowledge is captured w/in the kd script system, it is added into the compiled node or python build support tools. But when you have to adapt to an existing culture, as in a fork, you need a little grease. The node and python knowledge is the organized grease to glue a complete system onto a consistent base. kd uses a \"Convention over Configuration\" and heavily seeds a bash operating environment with functions and variables, supporting multi-tech integration projects. The ability to \"regenerate\" the environment from the kd reset command means that scripts can be rapidly edited and applied - recorded in a pull-request, and the collective wisdom knitting forward. kd can be rapidly and ad-hoc adjusted, and it is specific to this repository. The bashenv orchestrates the connection of the environment with a conversational mutator - a live bash shell. As this is bound to a repository top, the space underneath is managed - so this is effectively a bash shell over a commit-trail of reference. kd is scoped by directory (or checkout) - based on the KITWB variable. KITWB = /home/ewelton/Desktop/korsimoro/projects/kit-workbench For more information, check out this file: /home/ewelton/Desktop/korsimoro/projects/kit-workbench/docs/bashenv.md In general use kd [cmd] help for more information. component-list Show component list docs Missing scope file in help renew Missing scope file in renew kernel Missing scope file in help fulltest Missing scope file in fulltest setup Missing scope file in setup spec Missing scope file in spec test Missing scope file in test klang Missing scope file in help node Missing scope file in node python Missing scope file in python ruby Missing scope file in ruby manual Recursively assembleup documentation as a markdown file. Components Component Description bench Identity Tech Workbench - powered by JupyterLab credcom_kernel Credenitial-Commons @identity.com dsr_kernel Description of dsr_kernel itypescript Description of itypescript nteract Description of nteract tool Python CLI tool_kernel Description of tool_kernel bench kd bench [SUBCOMMAND] [OPTIONS] kd bench commands Commands (run as subprocesses) bootstrap Just fetch updates info view docs setup_nvm Setup bootstrap kd bootstrap info kd bench info Info about kd bench setup_nvm kd setup-nvm curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash -e|--echo credcom_kernel kd bench [SUBCOMMAND] [OPTIONS] kd bench commands Commands (run as subprocesses) install install kernel launch install kernel package install kernel patch install kernel install kd credcom_kernel kernel install Create install launch kd credcom_kernel kernel install Create install package kd credcom_kernel kernel package Create Package patch kd credcom_kernel kernel package Create Package dsr_kernel kd bench [SUBCOMMAND] [OPTIONS] kd bench commands Commands (run as subprocesses) install install kernel launch install kernel package install kernel patch install kernel install kd credcom_kernel kernel install Create install launch kd credcom_kernel kernel install Create install package kd credcom_kernel kernel package Create Package patch kd credcom_kernel kernel package Create Package itypescript kd bench [SUBCOMMAND] [OPTIONS] kd bench commands Commands (run as subprocesses) info view docs info kd itypescript info Info about kd itypescript nteract kd bench [SUBCOMMAND] [OPTIONS] kd bench commands Commands (run as subprocesses) start start start kd nteract start Info about kd nteract start tool kd bench [SUBCOMMAND] [OPTIONS] kd bench commands Commands (run as subprocesses) docs init init init initsheets initsheets manual init docs kd tool init write out commands to add and tag initial sheets init kd tool init write out commands to add and tag initial sheets initsheets kd tool initsheets write out commands to add and tag initial sheets manual kd tool init write out commands to add and tag initial sheets tool_kernel kd bench [SUBCOMMAND] [OPTIONS] kd bench commands Commands (run as subprocesses) info view docs install install kernel package install kernel info kd tool_kernel info Info about kd tool_kernel install kd tool_kernel kernel install Create install package kd tool_kernel kernel package Create Package About kd <command> [help] kd is a bash environment supporting development. kd is pure anti-pattern, in includes - 'within-environment' mutations- bash functions allow forward mutation of the active environment, with no guarantees of any stable state, save the single application of this function after a clean reset - pure 'side-effect' focus. This is an attempt to identify mutators to the filesystem, and to codify them. All functions and commands in the environment are expected to operate upon the filesystem directly. git provides us exceptional visiblity into changes over the active checkout. kd supports the development of ad-hoc tasks required to effectively build a complex, multi-project system. As knowledge is captured w/in the kd script system, it is added into the compiled node or python build support tools. But when you have to adapt to an existing culture, as in a fork, you need a little grease. The node and python knowledge is the organized grease to glue a complete system onto a consistent base. kd uses a \"Convention over Configuration\" and heavily seeds a bash operating environment with functions and variables, supporting multi-tech integration projects. The ability to \"regenerate\" the environment from the kd reset command means that scripts can be rapidly edited and applied - recorded in a pull-request, and the collective wisdom knitting forward. kd can be rapidly and ad-hoc adjusted, and it is specific to this repository. The bashenv orchestrates the connection of the environment with a conversational mutator - a live bash shell. As this is bound to a repository top, the space underneath is managed - so this is effectively a bash shell over a commit-trail of reference. kd is scoped by directory (or checkout) - based on the KITWB variable. KITWB = /home/ewelton/Desktop/korsimoro/projects/kit-workbench For more information, check out this file: /home/ewelton/Desktop/korsimoro/projects/kit-workbench/docs/bashenv.md In general use kd [cmd] help for more information.","title":"Manual"},{"location":"example-manual/#kd","text":"kd [COMMAND] [help|--help|-help|-h|?] ... kd is a bash environment supporting development. Functions (modify the current shell) activate Configure shell to match build environment for [COMPONENT] add-command Add a function. add-component cd home, or into /home/ewelton/Desktop/korsimoro/projects/kit-workbench/[C]. add-function Add a function. build Build [C] using component build system cd cd /home/ewelton/Desktop/korsimoro/projects/kit-workbench/[PATH] (or base w/o arg) clean Remove as many artifacts for [C] as we know about describe Describe information about this build env kbash-env Display current environment settings. kbash-troff disable KBASH_TRACE kbash-tron set KBASH_TRACE to trace KBASH internals parallel Control how many jobs run in parallel. reset Reload the environment. setup Initialize a development environment troff Stop bash execution trace. tron Start bash execution trace. Commands (run as subprocesses) about Detailed Information about KBASH component-list Just fetch updates docs The KIT Workbench Documentation Environment kernel The KIT Workbench Documentation Environment klang Manage KBASH top level languages manual Generate help manual Components bench Identity Tech Workbench - powered by JupyterLab credcom_kernel Credenitial-Commons @identity.com dsr_kernel Description of dsr_kernel itypescript Description of itypescript nteract Description of nteract tool Python CLI tool_kernel Description of tool_kernel Use kd [FUNCTION|COMMAND|COMPONENT] help for more information.","title":"kd"},{"location":"example-manual/#functions","text":"Functions manipulate the local shell variables, unlike commands, which are executed by the shell as a subprocess.","title":"Functions"},{"location":"example-manual/#activate","text":"kd activate [help|--help|-help|-h|?] [COMPONENT] Configure shell to match build environment for [COMPONENT]","title":"activate"},{"location":"example-manual/#add-command","text":"kd add_command [help|--help|-help|-h|?] COMMAND_NAME Add a function. <<DETAILED INFORMATION ABOUT add_command>>","title":"add-command"},{"location":"example-manual/#add-component","text":"kd add_component [help|--help|-help|-h|?] [COMPONENT] cd home, or into /home/ewelton/Desktop/korsimoro/projects/kit-workbench/[C]. kd component-new [component-name] [component-var-prefix]","title":"add-component"},{"location":"example-manual/#add-function","text":"kd add_function [help|--help|-help|-h|?] FUNCTION_NAME Add a function. <<DETAILED INFORMATION ABOUT add_function>>","title":"add-function"},{"location":"example-manual/#build","text":"kd build [help|--help|-help|-h|?] [COMPONENT] Build [C] using component build system","title":"build"},{"location":"example-manual/#cd","text":"kd cd [help|--help|-help|-h|?] [PATH] cd /home/ewelton/Desktop/korsimoro/projects/kit-workbench/[PATH] (or base w/o arg) This is a shell function, which execute cd as follows: cd /home/ewelton/Desktop/korsimoro/projects/kit-workbench/[PATH]. If no PATH is provided, this just cds into cd /home/ewelton/Desktop/korsimoro/projects/kit-workbench","title":"cd"},{"location":"example-manual/#clean","text":"kd clean [help|--help|-help|-h|?] [COMPONENT] Remove as many artifacts for [C] as we know about kd clean [COMPONENT] ... Goal : Remove as many artifacts for [C] as we know about Components bench Identity Tech Workbench - powered by JupyterLab credcom_kernel Credenitial-Commons @identity.com dsr_kernel Description of dsr_kernel itypescript Description of itypescript nteract Description of nteract tool Python CLI tool_kernel Description of tool_kernel","title":"clean"},{"location":"example-manual/#describe","text":"kd describe [help|--help|-help|-h|?] [COMPONENT] Describe information about this build env kd describe [COMPONENT] ... Goal : Describe information about this build env Components bench Identity Tech Workbench - powered by JupyterLab credcom_kernel Credenitial-Commons @identity.com dsr_kernel Description of dsr_kernel itypescript Description of itypescript nteract Description of nteract tool Python CLI tool_kernel Description of tool_kernel","title":"describe"},{"location":"example-manual/#kbash-env","text":"kd kbash_env [help|--help|-help|-h|?] Display current environment settings. kd env","title":"kbash-env"},{"location":"example-manual/#kbash-troff","text":"kd kbash_troff [help|--help|-help|-h|?] disable KBASH_TRACE This is equivalent to export KBASH_TRACE=false","title":"kbash-troff"},{"location":"example-manual/#kbash-tron","text":"kd kbash_tron [help|--help|-help|-h|?] set KBASH_TRACE to trace KBASH internals This is equivalent to export KBASH_TRACE=true","title":"kbash-tron"},{"location":"example-manual/#parallel","text":"kd parallel [help|--help|-help|-h|?] MAXJOBS Control how many jobs run in parallel. Control how many jobs run in parallel","title":"parallel"},{"location":"example-manual/#reset","text":"kd reset [help|--help|-help|-h|?] Reload the environment. In this shell, execute: /home/ewelton/Desktop/korsimoro/projects/kit-workbench/activate.sh This will cause the entire kd runtime to be reloaded, so any changes to functions or commands will be processed. This will update the activation count from 12 to 13","title":"reset"},{"location":"example-manual/#setup","text":"kd setup [help|--help|-help|-h|?] [COMPONENT] Initialize a development environment","title":"setup"},{"location":"example-manual/#troff","text":"kd troff [help|--help|-help|-h|?] Stop bash execution trace. Equivalent to set +x","title":"troff"},{"location":"example-manual/#tron","text":"kd tron [help|--help|-help|-h|?] Start bash execution trace. Equivalent to set -x","title":"tron"},{"location":"example-manual/#commands","text":"","title":"Commands"},{"location":"example-manual/#about","text":"kd <command> [help] kd is a bash environment supporting development. kd is pure anti-pattern, in includes - 'within-environment' mutations- bash functions allow forward mutation of the active environment, with no guarantees of any stable state, save the single application of this function after a clean reset - pure 'side-effect' focus. This is an attempt to identify mutators to the filesystem, and to codify them. All functions and commands in the environment are expected to operate upon the filesystem directly. git provides us exceptional visiblity into changes over the active checkout. kd supports the development of ad-hoc tasks required to effectively build a complex, multi-project system. As knowledge is captured w/in the kd script system, it is added into the compiled node or python build support tools. But when you have to adapt to an existing culture, as in a fork, you need a little grease. The node and python knowledge is the organized grease to glue a complete system onto a consistent base. kd uses a \"Convention over Configuration\" and heavily seeds a bash operating environment with functions and variables, supporting multi-tech integration projects. The ability to \"regenerate\" the environment from the kd reset command means that scripts can be rapidly edited and applied - recorded in a pull-request, and the collective wisdom knitting forward. kd can be rapidly and ad-hoc adjusted, and it is specific to this repository. The bashenv orchestrates the connection of the environment with a conversational mutator - a live bash shell. As this is bound to a repository top, the space underneath is managed - so this is effectively a bash shell over a commit-trail of reference. kd is scoped by directory (or checkout) - based on the KITWB variable. KITWB = /home/ewelton/Desktop/korsimoro/projects/kit-workbench For more information, check out this file: /home/ewelton/Desktop/korsimoro/projects/kit-workbench/docs/bashenv.md In general use kd [cmd] help for more information.","title":"about"},{"location":"example-manual/#component-list","text":"Show component list","title":"component-list"},{"location":"example-manual/#docs","text":"Missing scope file in help","title":"docs"},{"location":"example-manual/#renew","text":"Missing scope file in renew","title":"renew"},{"location":"example-manual/#kernel","text":"Missing scope file in help","title":"kernel"},{"location":"example-manual/#fulltest","text":"Missing scope file in fulltest","title":"fulltest"},{"location":"example-manual/#setup_1","text":"Missing scope file in setup","title":"setup"},{"location":"example-manual/#spec","text":"Missing scope file in spec","title":"spec"},{"location":"example-manual/#test","text":"Missing scope file in test","title":"test"},{"location":"example-manual/#klang","text":"Missing scope file in help","title":"klang"},{"location":"example-manual/#node","text":"Missing scope file in node","title":"node"},{"location":"example-manual/#python","text":"Missing scope file in python","title":"python"},{"location":"example-manual/#ruby","text":"Missing scope file in ruby","title":"ruby"},{"location":"example-manual/#manual","text":"Recursively assembleup documentation as a markdown file.","title":"manual"},{"location":"example-manual/#components","text":"Component Description bench Identity Tech Workbench - powered by JupyterLab credcom_kernel Credenitial-Commons @identity.com dsr_kernel Description of dsr_kernel itypescript Description of itypescript nteract Description of nteract tool Python CLI tool_kernel Description of tool_kernel","title":"Components"},{"location":"example-manual/#bench","text":"kd bench [SUBCOMMAND] [OPTIONS] kd bench commands Commands (run as subprocesses) bootstrap Just fetch updates info view docs setup_nvm Setup","title":"bench"},{"location":"example-manual/#bootstrap","text":"kd bootstrap","title":"bootstrap"},{"location":"example-manual/#info","text":"kd bench info Info about kd bench","title":"info"},{"location":"example-manual/#setup_nvm","text":"kd setup-nvm curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash -e|--echo","title":"setup_nvm"},{"location":"example-manual/#credcom_kernel","text":"kd bench [SUBCOMMAND] [OPTIONS] kd bench commands Commands (run as subprocesses) install install kernel launch install kernel package install kernel patch install kernel","title":"credcom_kernel"},{"location":"example-manual/#install","text":"kd credcom_kernel kernel install Create install","title":"install"},{"location":"example-manual/#launch","text":"kd credcom_kernel kernel install Create install","title":"launch"},{"location":"example-manual/#package","text":"kd credcom_kernel kernel package Create Package","title":"package"},{"location":"example-manual/#patch","text":"kd credcom_kernel kernel package Create Package","title":"patch"},{"location":"example-manual/#dsr_kernel","text":"kd bench [SUBCOMMAND] [OPTIONS] kd bench commands Commands (run as subprocesses) install install kernel launch install kernel package install kernel patch install kernel","title":"dsr_kernel"},{"location":"example-manual/#install_1","text":"kd credcom_kernel kernel install Create install","title":"install"},{"location":"example-manual/#launch_1","text":"kd credcom_kernel kernel install Create install","title":"launch"},{"location":"example-manual/#package_1","text":"kd credcom_kernel kernel package Create Package","title":"package"},{"location":"example-manual/#patch_1","text":"kd credcom_kernel kernel package Create Package","title":"patch"},{"location":"example-manual/#itypescript","text":"kd bench [SUBCOMMAND] [OPTIONS] kd bench commands Commands (run as subprocesses) info view docs","title":"itypescript"},{"location":"example-manual/#info_1","text":"kd itypescript info Info about kd itypescript","title":"info"},{"location":"example-manual/#nteract","text":"kd bench [SUBCOMMAND] [OPTIONS] kd bench commands Commands (run as subprocesses) start start","title":"nteract"},{"location":"example-manual/#start","text":"kd nteract start Info about kd nteract start","title":"start"},{"location":"example-manual/#tool","text":"kd bench [SUBCOMMAND] [OPTIONS] kd bench commands Commands (run as subprocesses) docs init init init initsheets initsheets manual init","title":"tool"},{"location":"example-manual/#docs_1","text":"kd tool init write out commands to add and tag initial sheets","title":"docs"},{"location":"example-manual/#init","text":"kd tool init write out commands to add and tag initial sheets","title":"init"},{"location":"example-manual/#initsheets","text":"kd tool initsheets write out commands to add and tag initial sheets","title":"initsheets"},{"location":"example-manual/#manual_1","text":"kd tool init write out commands to add and tag initial sheets","title":"manual"},{"location":"example-manual/#tool_kernel","text":"kd bench [SUBCOMMAND] [OPTIONS] kd bench commands Commands (run as subprocesses) info view docs install install kernel package install kernel","title":"tool_kernel"},{"location":"example-manual/#info_2","text":"kd tool_kernel info Info about kd tool_kernel","title":"info"},{"location":"example-manual/#install_2","text":"kd tool_kernel kernel install Create install","title":"install"},{"location":"example-manual/#package_2","text":"kd tool_kernel kernel package Create Package","title":"package"},{"location":"example-manual/#about_1","text":"kd <command> [help] kd is a bash environment supporting development. kd is pure anti-pattern, in includes - 'within-environment' mutations- bash functions allow forward mutation of the active environment, with no guarantees of any stable state, save the single application of this function after a clean reset - pure 'side-effect' focus. This is an attempt to identify mutators to the filesystem, and to codify them. All functions and commands in the environment are expected to operate upon the filesystem directly. git provides us exceptional visiblity into changes over the active checkout. kd supports the development of ad-hoc tasks required to effectively build a complex, multi-project system. As knowledge is captured w/in the kd script system, it is added into the compiled node or python build support tools. But when you have to adapt to an existing culture, as in a fork, you need a little grease. The node and python knowledge is the organized grease to glue a complete system onto a consistent base. kd uses a \"Convention over Configuration\" and heavily seeds a bash operating environment with functions and variables, supporting multi-tech integration projects. The ability to \"regenerate\" the environment from the kd reset command means that scripts can be rapidly edited and applied - recorded in a pull-request, and the collective wisdom knitting forward. kd can be rapidly and ad-hoc adjusted, and it is specific to this repository. The bashenv orchestrates the connection of the environment with a conversational mutator - a live bash shell. As this is bound to a repository top, the space underneath is managed - so this is effectively a bash shell over a commit-trail of reference. kd is scoped by directory (or checkout) - based on the KITWB variable. KITWB = /home/ewelton/Desktop/korsimoro/projects/kit-workbench For more information, check out this file: /home/ewelton/Desktop/korsimoro/projects/kit-workbench/docs/bashenv.md In general use kd [cmd] help for more information.","title":"About"},{"location":"example-outputs/","text":"Example Outputs sanity git clone git@github.com:korsimoro/kbash ~/.kbash ~/.kbash/test/sanity.sh Korismoro:test$ ./sanity.sh kx[0]:kx> kx kx [COMMAND] [help|--help|-help|-h|?] ... kx is a bash environment supporting development. Functions (modify the current shell) cd cd /home/ewelton/Desktop/korsimoro/utilities/k-bashenv/test/testdir/kx/[PATH] (or base w/o arg) component-list List components, if any. component-new cd home, or into /home/ewelton/Desktop/korsimoro/utilities/k-bashenv/test/testdir/kx/[C]. kbash-env Display current environment settings. kbash-troff disable KBASH_TRACE kbash-tron set KBASH_TRACE to trace KBASH internals parallel Control how many jobs run in parallel. reset Reload the environment. troff Stop bash execution trace. tron Start bash execution trace. Print K-Bash Commands Commands about manual Generate help manual script Execute a script of kd commands update Just fetch updates Command Groups node The KIT Workbench Documentation Environment python The KIT Workbench Documentation Environment ruby The KIT Workbench Documentation Environment No components configured, use kx component-new to add components. Use kx COMMAND help for more information. kx[0]:kx> exit Korismoro:test$","title":"Output"},{"location":"example-outputs/#example-outputs","text":"","title":"Example Outputs"},{"location":"example-outputs/#sanity","text":"git clone git@github.com:korsimoro/kbash ~/.kbash ~/.kbash/test/sanity.sh Korismoro:test$ ./sanity.sh kx[0]:kx> kx kx [COMMAND] [help|--help|-help|-h|?] ... kx is a bash environment supporting development. Functions (modify the current shell) cd cd /home/ewelton/Desktop/korsimoro/utilities/k-bashenv/test/testdir/kx/[PATH] (or base w/o arg) component-list List components, if any. component-new cd home, or into /home/ewelton/Desktop/korsimoro/utilities/k-bashenv/test/testdir/kx/[C]. kbash-env Display current environment settings. kbash-troff disable KBASH_TRACE kbash-tron set KBASH_TRACE to trace KBASH internals parallel Control how many jobs run in parallel. reset Reload the environment. troff Stop bash execution trace. tron Start bash execution trace. Print K-Bash Commands Commands about manual Generate help manual script Execute a script of kd commands update Just fetch updates Command Groups node The KIT Workbench Documentation Environment python The KIT Workbench Documentation Environment ruby The KIT Workbench Documentation Environment No components configured, use kx component-new to add components. Use kx COMMAND help for more information. kx[0]:kx> exit Korismoro:test$","title":"sanity"},{"location":"layout/","text":"Repository Layout Subdirectories Dir Purpose api Subsystem exposed in consumer shells core Core bash abilities docs Documentation shipped on public site lang Specific Language Support (node, python, ruby, etc....) mkdocs Source for site docs setup Templates used in new environments test Utilities supporting test Executable Files File Purpose boot.sh Invoke to activate custom environment setup.sh Use to set up a new environment Utility Files Fjle Purpose os.sh Specific OS/Bash level adaptations Control Files Fjle Purpose README.md Use to set up a new environment LICENSE not yet present","title":"Layout"},{"location":"layout/#repository-layout","text":"","title":"Repository Layout"},{"location":"layout/#subdirectories","text":"Dir Purpose api Subsystem exposed in consumer shells core Core bash abilities docs Documentation shipped on public site lang Specific Language Support (node, python, ruby, etc....) mkdocs Source for site docs setup Templates used in new environments test Utilities supporting test","title":"Subdirectories"},{"location":"layout/#executable-files","text":"File Purpose boot.sh Invoke to activate custom environment setup.sh Use to set up a new environment","title":"Executable Files"},{"location":"layout/#utility-files","text":"Fjle Purpose os.sh Specific OS/Bash level adaptations","title":"Utility Files"},{"location":"layout/#control-files","text":"Fjle Purpose README.md Use to set up a new environment LICENSE not yet present","title":"Control Files"},{"location":"ops/","text":"Theory of Operation $PROJECT specific activation What happens Activate a shell by executing . $PROJECT/activate.sh , which applies the environment to the current shell, or $PROJECT/shell.sh which spawns a subshell with the $PROJECT environment activated. The . $PROJECT/activate.sh command sets the project base directory and invokes $KBASH/util/api/boot.sh . Sourcing boot.sh causes the following to occur, where all shell input files are sed filtered to replace two strings: ENTRYPOINT , which is used to prefix all kbash environment elements. For example, if your entrypoint is kx then all of the functions involved in this environment should be prefixed with kx_ . Access to the environment is then acquired by running commands prefixed with kx , such as kx build project3 VAR_PREFIX , which is used to scope all variables associated with the top level build environment. Often, the ENTRYPOINT does not scan well in variable assignments. In the kx test case, the value of VAR_PREFIX is KXX , meaning that all environment variables associated with the $PROJECT are prefixed with KXX_ The following global variables are set during invocation Pos Variable Purpose $1 ENTRYPOINT scopes functions $2 VAR_PREFIX scopes variables $3 USER_UTIL_LOAD_LIST loaded, in order, from $PROJECT $4 LANG_LOAD_LIST loaded, in order, from $KBASH","title":"Operations"},{"location":"ops/#theory-of-operation","text":"","title":"Theory of Operation"},{"location":"ops/#project-specific-activation","text":"","title":"$PROJECT specific activation"},{"location":"ops/#what-happens","text":"Activate a shell by executing . $PROJECT/activate.sh , which applies the environment to the current shell, or $PROJECT/shell.sh which spawns a subshell with the $PROJECT environment activated. The . $PROJECT/activate.sh command sets the project base directory and invokes $KBASH/util/api/boot.sh . Sourcing boot.sh causes the following to occur, where all shell input files are sed filtered to replace two strings: ENTRYPOINT , which is used to prefix all kbash environment elements. For example, if your entrypoint is kx then all of the functions involved in this environment should be prefixed with kx_ . Access to the environment is then acquired by running commands prefixed with kx , such as kx build project3 VAR_PREFIX , which is used to scope all variables associated with the top level build environment. Often, the ENTRYPOINT does not scan well in variable assignments. In the kx test case, the value of VAR_PREFIX is KXX , meaning that all environment variables associated with the $PROJECT are prefixed with KXX_ The following global variables are set during invocation Pos Variable Purpose $1 ENTRYPOINT scopes functions $2 VAR_PREFIX scopes variables $3 USER_UTIL_LOAD_LIST loaded, in order, from $PROJECT $4 LANG_LOAD_LIST loaded, in order, from $KBASH","title":"What happens"},{"location":"api/commands/","text":"These will be searched for and loaded on demand","title":"Commands"},{"location":"api/commands/#these-will-be-searched-for-and-loaded-on-demand","text":"","title":"These will be searched for and loaded on demand"},{"location":"api/functions/","text":"these are loaded into the shell","title":"Functions"},{"location":"api/functions/#these-are-loaded-into-the-shell","text":"","title":"these are loaded into the shell"},{"location":"api/intro/","text":"api The API is defined by - ENTRYPOINT - VAR_PREFIX Variables Where Set Variable Value VAR_PREFIX $( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/..\" && pwd ) VAR_PREFIX_KBASH $KBASH/api/util/kbash/state.sh VAR_PREFIX_KBASH_LOGS $KBASH/api/util/kbash/state.sh VAR_PREFIX_KBASH_COMMAND $KBASH/api/util/kbash/state.sh VAR_PREFIX_FUNCTION_LIST $KBASH/api/util/kbash/state.sh VAR_PREFIX_KBASH_FUNCTION $KBASH/api/util/kbash/state.sh VAR_PREFIX_COMPONENT_LIST $KBASH/api/util/kbash/state.sh VAR_PREFIX_COMPONENT_DIR $KBASH/api/util/kbash/state.sh Initial Values Variable Value VAR_PREFIX $( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/..\" && pwd ) VAR_PREFIX_KBASH $VAR_PREFIX/bashenv VAR_PREFIX_KBASH_LOGS $VAR_PREFIX/kbash-logs VAR_PREFIX_KBASH_COMMAND $VAR_PREFIX_KBASH/commands VAR_PREFIX_FUNCTION_LIST VAR_PREFIX_KBASH_FUNCTION $VAR_PREFIX_KBASH/functions VAR_PREFIX_COMPONENT_LIST VAR_PREFIX_COMPONENT_DIR $VAR_PREFIX_KBASH/components api/boot.sh boot.sh is invoked with 4 positional arguments . <path-to-project-local-activate.sh> \\ \"ENTRYPOINT\" \\ \"VAR_PREFIX\" \\ \"USER_UTIL_LOAD_LIST\" \\ \"SYSTEM_UTIL_LOAD_LIST\" About ENTRYPOINT The shell prefix is the command line entry point used to access this environment. It is also used to scope all functions loaded into the shell. api/commands","title":"Intro"},{"location":"api/intro/#api","text":"The API is defined by - ENTRYPOINT - VAR_PREFIX","title":"api"},{"location":"api/intro/#variables","text":"","title":"Variables"},{"location":"api/intro/#where-set","text":"Variable Value VAR_PREFIX $( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/..\" && pwd ) VAR_PREFIX_KBASH $KBASH/api/util/kbash/state.sh VAR_PREFIX_KBASH_LOGS $KBASH/api/util/kbash/state.sh VAR_PREFIX_KBASH_COMMAND $KBASH/api/util/kbash/state.sh VAR_PREFIX_FUNCTION_LIST $KBASH/api/util/kbash/state.sh VAR_PREFIX_KBASH_FUNCTION $KBASH/api/util/kbash/state.sh VAR_PREFIX_COMPONENT_LIST $KBASH/api/util/kbash/state.sh VAR_PREFIX_COMPONENT_DIR $KBASH/api/util/kbash/state.sh","title":"Where Set"},{"location":"api/intro/#initial-values","text":"Variable Value VAR_PREFIX $( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/..\" && pwd ) VAR_PREFIX_KBASH $VAR_PREFIX/bashenv VAR_PREFIX_KBASH_LOGS $VAR_PREFIX/kbash-logs VAR_PREFIX_KBASH_COMMAND $VAR_PREFIX_KBASH/commands VAR_PREFIX_FUNCTION_LIST VAR_PREFIX_KBASH_FUNCTION $VAR_PREFIX_KBASH/functions VAR_PREFIX_COMPONENT_LIST VAR_PREFIX_COMPONENT_DIR $VAR_PREFIX_KBASH/components","title":"Initial Values"},{"location":"api/intro/#apibootsh","text":"boot.sh is invoked with 4 positional arguments . <path-to-project-local-activate.sh> \\ \"ENTRYPOINT\" \\ \"VAR_PREFIX\" \\ \"USER_UTIL_LOAD_LIST\" \\ \"SYSTEM_UTIL_LOAD_LIST\" About ENTRYPOINT The shell prefix is the command line entry point used to access this environment. It is also used to scope all functions loaded into the shell.","title":"api/boot.sh"},{"location":"api/intro/#apicommands","text":"","title":"api/commands"},{"location":"api/util/","text":"these provide support utilities","title":"Util"},{"location":"api/util/#these-provide-support-utilities","text":"","title":"these provide support utilities"}]}